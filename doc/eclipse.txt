====
    Licensed under the GNU General Public License version 2 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

           http://www.gnu.org/licenses/gpl-2.0.txt

    This code is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License version 2 only, as
    published by the Free Software Foundation.

    This code is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    version 2 for more details (a copy is included in the LICENSE file that
    accompanied this code).

    You should have received a copy of the GNU General Public License version
    2 along with this work; if not, write to the Free Software Foundation,
    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
====

############################################
# Neue Anleitung (ZIP-basiert)             #
############################################

Installation Eclipse-Plugins
---------------------------------------
Entsprechend der Standard-Prozedur von Eclipse über "Help" - "Install new Software" die
Update-Site von m2eclipse eintragen:
    http://m2eclipse.sonatype.org/sites/m2e
Dann die "Maven Integration for Eclipse" installieren.
Installations-Anleitung: http://m2eclipse.sonatype.org/installing-m2eclipse.html


Download des aktuellen Stands des zentralen Projekts:
---------------------------------------
http://github.com/jschneider/com.cedarsoft.otec/zipball/master

Bitte dieses Verzeichnis in den Eclipse-Workspace extrahieren (und Verzeichnis in "com.cedarsoft.otec" umbenennen?).


Projekt in Eclipse importieren
---------------------------------------
File --> Import
Maven --> Existing Maven Projects
Root Directory: ${workspace}/com.cedarsoft.otec

Das Maven-Projekt wird automatisch mit allen Modulen angelegt.


############################################
# Alte Anleitung inklusive Git-Integration #
############################################


Eclipse Integration
====================================================
  http://wiki.eclipse.org/EGit/User_Guide
  http://wiki.eclipse.org/EGit/Git_For_Eclipse_Users
  http://wiki.eclipse.org/EGit/User_Guide#Create_Repository_at_GitHub
  http://wiki.eclipse.org/EGit/User_Guide#Working_with_remote_Repositories

Benötigte Plugins
---------------------------------------
EGit (http://www.eclipse.org/egit/)
	Update-Site: http://download.eclipse.org/egit/updates

m2eclipse (http://m2eclipse.sonatype.org/)
	Update-Site: http://m2eclipse.sonatype.org/sites/m2e
	Installations-Anleitung: http://m2eclipse.sonatype.org/installing-m2eclipse.html

Git Configuration
-----------------------------------------
Kann bequem aus Eclipse heraus durchgeführt werden.
Wichtig insbesondere:
 <user.email>
 <user.name>

Repository clone in Eclipse
---------------------------------------
(http://wiki.eclipse.org/EGit/User_Guide#Starting_the_import_wizard)
File --> Import
Git - Projects from Git
Clone...
  URI: (aus github.com Weboberfläche)
    git@github.com:jschneider/com.cedarsoft.otec.git

Branches auswählen (master)
--> Fertigstellen


Der lokale Repository-Clone wird dann erstellt. Ein Projekt wird aber nicht automatisch angelegt.


Projekt in Eclipse importieren
---------------------------------------
File --> Import
Maven --> Existing Maven Projects
Root Directory: ${workspace}/com.cedarsoft.otec

Das Maven-Projekt wird automatisch mit allen Modulen angelegt.


Git Plugin für Projekt konfigurieren
---------------------------------------
Team --> Share Project
Git
vorhandenen Eintrag auswählen


Konfiguration
=================================
http://wiki.eclipse.org/EGit/User_Guide#Working_with_remote_Repositories


Die Konfiguration der Repositories mit Fetch/Pull-Konfigurationen erfolgt über die "Git Repositories"-View

Empfohlene Konfiguration
------------------------------------------------------------------
origin: Eigenes Repository mit Fetch und Pull-Konfiguration
            Source Ref          Destination Ref
  Fetch:    refs/heads/*        /refs/remotes/origin/*      (alle Branches vom Repository von GitHub werden geholt)
  Pull:     refs/heads/master   /refs/heads/master          (nur der lokale Master-Branch wird an GitHub übertragen, nicht die Feature-Branches)

central: Verweis auf das Ursprungs-Repository (http://github.com/jschneider/com.cedarsoft.otec.git) mit Fetch-Konfiguration

            Source Ref          Destination Ref
  Fetch:    refs/heads/*        /refs/remotes/central/*      (alle Branches vom central Repository von GitHub werden geholt)


Daily work
=================================

Fetch/Merge
---------------------------------------
View: Git-Repositories
central --> Fetch
origil --> Fetch

(Merge nicht vergessen!)

Feature-Branch erzeugen
---------------------------------------
Team --> Branch --> New Branch {Featurebranch}

Commit(s) auf Feature-Branch
---------------------------------------
Team --> Commit

Merge mit Hauptbranch
---------------------------------------
In Hauptbranch wechseln:
  Team --> Branch {Hauptbranch}
Änderungen in Hauptbranch mergen:
  Team --> Merge {Featurebranch}

Push
---------------------------------------
View: Git-Repositories
origin --> Push


Pull Request
====================================
Nach Abschluss der Lösung, bitte einen Pull Request stellen. Bitte insbesondere den Target-Branch beachten.
Bitte den persönlichen Zielbranch korrekt angeben.

Erläuterungen:
  http://help.github.com/pull-requests/











