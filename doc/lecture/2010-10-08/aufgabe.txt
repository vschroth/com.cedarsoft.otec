====
    Licensed under the GNU General Public License version 2 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

           http://www.gnu.org/licenses/gpl-2.0.txt

    This code is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License version 2 only, as
    published by the Free Software Foundation.

    This code is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    version 2 for more details (a copy is included in the LICENSE file that
    accompanied this code).

    You should have received a copy of the GNU General Public License version
    2 along with this work; if not, write to the Free Software Foundation,
    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
====

--------------------------------
- Übungsaufgabe 1: (10 Punkte) -
--------------------------------

Zusammenfassung:
===================
Für die Darstellung von kaufmännischen Prozessen im Unternehmen sollen die grundlegenden Klassen erstellt werden.
Die zu erstellenden Klassen sollen dabei folgende Aspekte abdecken:

1. Geldbeträge
Diese müssen so miteinander verrechnet werden können, dass typische Anwendungsfälle abgedeckt werden können.

2. Währungen
Im Unternehmen wird mit verschiedene Währungen gerechnet, die eindeutig zuordenbar sind.

3. Wechselkurse
Es gibt sowohl variable Wechselkurse als auch Wechselkurse, die innerhalb einer prozentualen Bandbreite
fixiert sind (z.B. 2,25% der Dänischen Krone zum Euro).
Die Wechselkurse besitzen jeweils einen Ankaufs- und Verkaufskurs.

4. Umrechnungen
Verschiedene Beträge in verschiedenen Währungen müssen nun miteinander verrechnet werden können.


Unit-Tests:
===================
Um die Korrektheit der Funktionen zu belegen, sind ausreichend Unit-Tests zu erstellen.


API-Design
===================
Da die erstellten Klassen als Grundlage für die weiteren Aufgaben dienen werden, müssen diese entsprechend
zukunftssicher designt werden. Sie müssen sich leicht warten und erweitern lassen.
Außerdem sollten sie weitgehend gegen fehlerhafte Benutzung immun sein.
